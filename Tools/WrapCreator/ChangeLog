Fri Nov  3 15:30:13 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCClass.m ([-initWithDictionary:]): Read the `hardcoded
	constants' section in the .jigs file.  ([-outputWrappers]): Added
	code to output the `hardcoded constants'.
	
Thu Nov  2 16:01:24 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCLibrary.m ([+initializeWithJigsFile:preprocessedHeaderFile:
	headerFile:wrapDirectory:libraryName:verboseOutput:]):
	Accept enumerations and manage them as custom types with 
	int primitive type.

Wed Nov  1 15:06:56 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCLibrary.m ([+initializeWithJigsFile:preprocessedHeaderFile:
	headerFile:wrapDirectory:libraryName:verboseOutput:]): Some code
	from ([+outputWrappers]) has been moved here, so that all the
	classes to wrap are loaded in before the wrapping takes place.
	([+javaClassNameForObjcClassName:]): New method made possible by
	the afore mentioned rearranging of class loading.  All the code
	trying to guess the class name mapping has been moved here from
	[WCObjectType -javaArgumentType].
	* WCLibrary.h: Updated.
	* WCObjectType.h: Added ivar longJavaType.
	* WCObjectType.m ([-initWithObjcType:]): Ask the library to do the
	mapping of class names.  ([-javaArgumentType]): Moved most of the
	code to WCLibrary.m; now simply use the mapped name.
	* WCMethod.m ([-outputJniMethodName]): Warn the user if we don't
	have enough information to output a working wrapper for this
	method and he needs to help us by adding a `class method name
	mapping hints' section to his .jigs file.
	
Wed Nov  1 14:55:45 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/java-wrapper.make: Run WrapCreator in silent mode if
	make is run with arguments `verbose=no'.

Wed Nov  1 11:32:49 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCMethod.m (convertToJNI): New function converting class names
	to JNI convention for use in long JNI native function names.
	([-setOutputFullJniName:]): New method.  ([-outputJniMethodName]):
	Added code to output a long jni method name if required.
	* WCMethod.h: Updated for the changes.
	* WCClass.m ([-outputWrappers]): Rewritten code which outputs
	method wrappers so that it decides whether to use the long JNI
	name or the short one for each wrapped method.
	(setNeedsLongJniName): New function to support the new code in
	([-outputWrappers]).
	
Fri Oct 20 12:40:29 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCHeaderParser.m ([+methodNameFromMethodDeclaration:]): New method.
	* WCHeaderParser.h: Declared the new method.
	* WCClass.m ([-initWithDictionary:]): Accept and manage a `method
	declarations' option.  ([-declarationOfMethod:isClassMethod:]):
	New method.  ([-outputWrappers]): Use the new method; improved
	comment output.
	* WCClass.h: Declared the new method, added related instance 
	variables.

Tue Oct 17 14:37:25 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCTypeLoader.m: Use the new JIGSNSStringFromJstring and
	JIGSJstringFromNSString functions when morphing strings.

Fri Oct  6 12:41:40 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCType.h, WCType.m ([-javaArgumentType]): New method.
	* WCIdType.m ([-javaArgumentType]): Implemented.
	* WCObjectType.m ([-javaArgumentType]): Implemented.
	* WCPrimitiveType.h: Added ivar for java argument type.
	* WCPrimitiveType.m ([-javaArgumentType]): Implemented.
	* WCBOOLType.m, WCCharType.m, WCIntType.m, WCDoubleType.m: Set the
	java argument type ivar.
	* WCFloatType.m, WCUnsignedInt.m, WCCustomType.m: Idem.
	* WCMorphType.h, WCMorphType.m: Added support for java argument 
	type.
	* WCTypeLoader.m: Updated for change in WCMorphType; added 
	automatic morphing of selectors.
	* WCMethod.h, WCMethod.m ([-outputJavaArgumentSignature]),
	([-outputSelectorMapping]): New methods.
	* WCClass.m ([-outputWrappers]): Added code to output file with
	the method mapping for this class.
	* WCLibrary.h, WCLibrary.m ([+selectorMapFileForClass:]): New method.
	* WCLibrary.m ([+outputWrappers]): Output a file loading in all
	the selector mapping files for all classes; output code into the
	library initialization routine to load in the selector mappings.
	
Thu Sep 28 11:54:58 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.objc.template: Added setting of debug and
	profile flags to match the ones of the wrapped library.
	* Makefiles/java-wrapper.java.template: Idem. 
	* Makefiles/java-wrapper.make (before-$(TARGET)-all): Warn if
	trying to build the wrapper for a static library.
	 (WRAPPER_DIR): Add suffix if building a debug and/or profile
	version.  ($(WRAPPER_DIR)/stamp-file): Set the info about debug
	and profile in the GNUmakefiles we are generating; echo
	instructions on how to compile the wrapper at the end;
	(internal-java_wrapper-distclean): Remove JavaWrapper_debug and
	similar directories in distclean.
	* WCClass.m ([-outputWrappers]): Made output code invoke the new
	JIGS.loadLibrary () facility rather than the bare
	System.loadLibrary () to allow debug libraries to be wrapped;
	output import of gnu.gnustep.java.JIGS to allow this.

Tue Sep 26 12:27:43 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCLibrary.m ([+outputWrappers]): Read the custom type mapping
	and create the appropriate WCCustomType objects.
	* WCCustomType.m: New file.
	* WCCustomType.h: New file.
	* GNUmakefile (WrapCreator_OBJC_FILES): Added WCCustomType.m

Wed Sep  6 02:37:35 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCLibrary.m ([+prerequisiteLibraries]): New method.
	* WCLibrary.h: Declared the method.
	* WCClass.m ([-prerequisiteLibraries]): New method.
	* WCClass.h: Declared the new method.
	* WCClass.m ([-outputWrappers]): Output commands to load 
	in any prerequisite library native wrappers before the 
	library native wrapper.

Tue Sep  5 15:59:02 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCDoubleType.h, WCDoubleType.m, WCFloatType.h, WCFloatType.m:
	New files.
	* GNUmakefile: Added the new files.
	* WCTypeLoader.m ([+typeWithObjcType:]): Added float and double
	type.
	
Fri Aug 18 18:19:10 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCPrimitiveType.m ([-initWithObjcType:]): Fixed typo/bug
	preventing primitive types from being wrapped.

Fri Aug 18 17:14:10 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	Major speed up of WrapCreator, by parsing the header file 
	only once.
	* WCHeaderParser.m ([-initWithHeaderFile:]): Parse the whole
	header file once, saving all the method declarations.
	([-declarationOfMethod:isClassMethod:]): Moved all the parsing
	code to [-initWithHeaderFile:].  (skipObjcType): Made function
	inline.
	* WCHeaderParser.h: Added two ivars to store the parsed methods.
	* WCLibrary.m ([+initializeWithJigsFile:preprocessedHeaderFile:
	headerFile:wrapDirectory:libraryName:verboseOutput:]): Set verbose
	output before anything else, so it can be accessed by
	WCHeaderParser during initialization.
	
Fri Aug 18 16:05:10 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCClass.m ([-initWithDictionary:]): Fixed typo/bug when
	objective-c name is not specified.

Sun Aug 13 15:00:30 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make (java-wrapper): Depend on a stamp
	file rather than on GNUmakefile.  ($(WRAPPER_DIR)/GNUmakefile):
	Changed to $(WRAPPER_DIR)/stamp-file; create stamp-file at the
	end.

Sat Aug  5 15:46:27 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make (WRAP_CREATOR): Use opentool 
	to run WrapCreator more safely.

	
