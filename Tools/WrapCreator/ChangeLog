2010-02-12  Nicola Pero  <nicola@nicola.brainstorm.co.uk>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file):
	Rewritten the rule to reduce the number of subprocesses and steps
	required and print friendly messages.  New variables implementing
	messages to print.  Display detailed information only if
	messages=yes is being used.
	(WRAPPER_HEADER): Use := to avoid spawning multiple subprocesses.
	
2010-02-12  Nicola Pero  <nicola.pero@meta-innovation.com>

	Implemented parallelized builds of java wrappers.
	* Makefiles/java-wrapper.make: Use ECHO_NOTHING and END_ECHO
	instead of @ in most rules.
	(after-$(GNUSTEP_INSTANCE)-all, internal-java-wrapper-install_,
	internal-java-wrapper-uninstall_): Do not unset MAKEFLAGS before
	running a submake as that prevents a parallel build from staying
	parallel when compiling the wrappers.  Instead, rewritten the code
	to manually fire off a Master invocation.
	
Fri Feb  1 14:26:07 2008  Nicola Pero  <nicola.pero@meta-innovation.com>

	* Makefiles/search_header.sh: Use /bin/sh instead of /bin/bash
	which might not be available (suggestion from Yury Mishchenko
	<Yury.Mishchenko@infor.com>).  Updated script for gnustep-make v2.
	Added missing quoting.
	
Fri Nov 30 03:04:27 2007  Nicola Pero  <nicola.pero@meta-innovation.com>

	* GNUmakefile (JIGS_MAKE_DIR): Replaced deprecated INSTALL_ROOT_DIR with
	DESTDIR.	

Web Feb 14 12:36:33 2007  Nicola Pero  <nicola.pero@meta-innovation.com>

	* Makefiles/java-wrapper.make (internal-java_wrapper-install_),
	(internal-java_wrapper-uninstall_): Pass down
	GNUSTEP_INSTALLATION_DIR or GNUSTEP_INSTALLATION_DOMAIN depending
	on which is defined in the current run.
	
Mon Oct  9 23:28:18 2006  Nicola Pero  <nicola.pero@meta-innovation.com>

	* GNUmakefile: Do not set GNUSTEP_INSTALLATION_DIR.

Fri Oct  6 08:36:58 2006  Nicola Pero  <nicola.pero@meta-innovation.com>

	* Makefiles/java-wrapper.make: Use GNUSTEP_INSTANCE, not
	(obsolete) variable TARGET.

Mon Oct  2 15:37:53 2006  Nicola Pero  <nicola.pero@meta-innovation.com>

	* Makefiles/java-wrapper.make (WRAP_CREATOR): Do not use opentool,
	which is now obsolete.

Sat Sep  9 12:13:42 2006  Nicola Pero  <nicola.pero@meta-innovation.com>

	* GNUmakefile (after-install): Do not install
	java-wrapper.top.debug.template (Problem reported by YunSong Hwang
	<hys545@dreamwiz.com>).

Fri Sep  8 18:33:52 2006  Nicola Pero  <nicola.pero@meta-innovation.com>

	Use JavaWrapper as the name of the JavaWrapper directory no matter
	if we're building with debug enabled or not.
	* Makefiles/java-wrapper.make (internal-distclean): Do not remove
	the JavaWrapper_debug directories and similar ones.
	(JIGS_LONG_SUFFIX): Variable removed.
	(WRAPPER_DIR_NAME): Do not append JIGS_LONG_SUFFIX.

	* Makefiles/java-wrapper.make (JAVA_WRAPPER_TOP_TEMPLATE): Always
	use the same template no matter if debug is enabled or not.
	* Makefiles/java-wrapper.top.debug.template: File removed.
	
Mon Aug 01 14:45:00 2003  Richard Frith-Macdonald <rfm@gnu.org>

	* Makefiles/java-wrapper.make: Tell the compiler that the header we
	are preprocessing is an objective-c header, so it can deal with it
	properly on MacOS-X systems with -fgnu-runtime specified.

Tue Jul 29 15:13:05 2003  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCClass.m ([WCClass -outputWrappers]): Update generated
	#include to include from GNUstepJava.
	* WCLibrary.m ([WCLibrary +outputWrappers]): Updated generated
	#include to include from GNUstepJava.
	
Tue Apr 30 14:48:03 2002  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/java-wrapper.make (HEADER_FILE): Fixed for new
	gnustep-make ... HEADER_FILES is no longer defined by the
	Master invocation and must be defined manually in the Instance
	invocation.
	(WRAPPER_HEADER): Idem.
	
Thu Mar 21 15:36:36 2002  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/java-wrapper.make: Updated internal-java_wrapper-all,
	internal-java_wrapper-install and internal-java_wrapper-uninstall
	for gnustep-make from CVS; don't include the instance part if this
	is not a java wrapper instance invocation; use GNUSTEP_INSTANCE
	instead of INTERNAL_java_wrapper_NAME.  Do not run any instance
	invocation on make distclean.  Do not protect against multiple
	inclusions.
	
Fri Dec 14 12:13:00 2001  Richard Frith-Macdonald <rfm@gnu.org>

	* GNUmakefile: Don't try to install recently deleted 'old' stuff.

Thu Dec 13 11:27:59 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/old-java-wrapper.java.template: Removed.
	* Makefiles/old-java-wrapper.make: Removed.
	* Makefiles/old-java-wrapper.objc.template: Removed.
	* Makefiles/old-java-wrapper.readme.template: Removed.
	* Makefiles/old-java-wrapper.top.debug.template: Removed.
	* Makefiles/old-java-wrapper.top.template: Removed.

Thu Dec 13 11:18:55 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* GNUmakefile (after-install): Use MKINSTALLDIRS when creating
	installation directories.

Thu Dec 13 11:13:03 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file): Use 
	cp, not INSTALL_DATA, to copy templates into the WRAPPER_DIR.

Thu Dec 13 10:27:50 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/java-wrapper.make (internal-java_wrapper-install):
	Pass down GNUSTEP_INSTALLATION_DIR.
	(internal-java_wrapper-uninstall): Idem.
	($(WRAPPER_DIR)/stamp-file): Do not replace INSTALL_AS_USER and 
	INSTALL_AS_GROUP - now automatically exported by gnustep-make; do 
	not replace GNUSTEP_INSTALLATION_DIR - now passed down directly.
	* Makefiles/java-wrapper.top.template: Updated for changes.
	* Makefiles/java-wrapper.top.debug.template: Idem

Wed Dec 12 16:45:28 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file): Replace
	INSTALL_AS_USER and INSTALL_AS_GROUP in the generated top level
	GNUmakefile.  Changed line to be replaced by
	GNUSTEP_INSTALLATION_DIR to be prettier.
	* Makefiles/java-wrapper.top.template: Updated for changes.
	* Makefiles/java-wrapper.top.debug.template: Updated.

2001-12-05 Richard Frith-Macdonald <rfm@gnu.org>

	* Makefiles/java-wrapper.make:a filter out -MMD and -MP flags
	directly rather than trying to turn off AUTO_DEPENDENCIES

2001-12-04 Richard frith-Macdonald <rfm@gnu.org>

	* Makefiles/java-wrapper.make (AUTO_DEPENDENCIES): Force to 'no'
	as this conflicts with the production of the preprocessed header
	output needed for WrapCreator.

Mon Nov 19 15:28:37 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make (SILENT_FLAGS): Fixed adding
	multiple flags.

Mon Nov 19 15:24:02 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file):
	Shortened messages about compiling automatically the wrapper
	library.

Mon Sep 10 18:15:52 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make (install-java_wrapper): Removed.
	(uninstall-java_wrapper): Removed.
	(internal-install-java-dirs): Removed.
	(internal-java_wrapper-install, internal-java_wrapper-uninstall):
	Modified to run the install code immediately if needed, without
	using auxiliary targets, or do nothing; and do not run `make all'
	as that is now already done by rules.make.

Wed Aug 29 13:36:47 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCMethod.m ([-outputJniMethodName]): In the warning for the
	unresolved class name, give an example of a class name mapping
	hints.

Wed Aug 29 13:26:19 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCMethod.m ([-outputJniMethodName]): Made warning produced when
	we find an unresolved class name as argument to an overloaded java
	method extremely loudy in an attempt to prevent people from
	ignoring it.

Tue Jul 24 12:21:26 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCHeaderParser.m ([-parseEnumBodyUsingScanner:]): Fixed problem
	with enumerations having a comma after the last item.
	* WCClass.m ([-outputWrappers]): Improved indentation of javadoc
	comments for enumerations.
	
Tue Jul 24 11:43:03 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	Implemented parsing ObjC header file for enumerations, and
	automatical wrapping of them on request.
	* WCHeaderParser.h: New instance variables and methods to support
	enumeration.
	* WCHeaderParser.m ([+initialize]): Prepare new static variables
	used in enumeration parsing.
	([-parseObjectiveC]): Moved the existing Objective-C class/method
	declarations parsing code in here.
	([-parseC]): New method with new parsing code to parse C
	enum/typedef enum declarations in the C header code.
	([-initWithHeaderFile:]): Invoke the parseXXX methods; set up
	enumeration ivars.
	([-parseEnumBodyUsingScanner:]): New method.
	([-recordEnumeration:withDictionary:]): New method.
	([-dictionaryForEnumeration:]): New method.
	([-enumerationTypes]): New method.
	(trimString): New function.
	* WCLibrary.m ([+initializeWithOptions:]): Automatically load in
	as custom types all the enumerations parsed by the header parser.
	* WCClass.h: Added ivar to record enumerations for this class.
	* WCClass.m ([-initWithDictionary:]): Set the enumeration ivar.
	([-outputWrappers]): Generate automatically code wrapping all
	enumerations for this class.
	
Tue Jul 24 11:17:27 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file): Pass
	the -P option to the preprocessor, to avoid annoying preprocessor
	output about lines.
	* Compatibility.h: New file.
	* WCLibrary.h: Include it.

Mon Jul 16 13:27:08 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* GNUmakefile: Install into GNUSTEP_SYSTEM_ROOT.

Mon Jul 16 13:21:43 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.top.template (SETINSTALLATIONDIRHERE):
	Added.
	* Makefiles/java-wrapper.top.debug.template
	(SETINSTALLATIONDIRHERE): Added.
	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file): Replace
	SETINSTALLATIONDIRHERE with the GNUSTEP_INSTALLATION_DIR in the
	top GNUmakefile so that GNUSTEP_INSTALLATION_DIR can be specified
	in the wrapper makefile, and it gets propagated to the wrapper
	makefiles.  Rearranged management of temporary files in sed rules
	to be simpler to understand.

Mon Jun 18 13:06:48 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCLibrary.m ([WCLibrary +javaClassNameForObjcClassName:]): Added
	NSData and NSMutableData to the hard-coded automaticallly mapped
	class names.

Mon May 21 02:15:06 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	Building java wrappers made independent from building the library.
	* Makefiles/java-wrapper.make: Rewritten.
	* Makefiles/java-wrapper.top.template: Do not set PACKAGE_NAME and
	VERSION.
	* Makefiles/java-wrapper.debug.top.template: Idem.
	* Makefiles/java-wrapper.objc.template (ADDITIONAL_LIB_DIRS):
	Removed.  (ADDITIONAL_INCLUDE_DIRS): Updated for new
	java-wrapper.make.
	* Makefiles/search_header.sh: New tool to search for headers.
	* GNUmakefile (after-install): Install search_header.sh.
	
Fri May 18 01:08:45 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	Made a backup of the old java-wrapper makefiles before the planned
	rewriting, so that legacy code can still use them simply by
	including old-java-wrapper.make rather than java-wrapper.make.
	* Makefiles/old-java-wrapper.make: New file - copy of
	java-wrapper.make, modified to include and process files with name
	old-java-wrapper.xxx.yyy rather than java-wrapper.xxx.yyy.
	* Makefiles/old-java-wrapper.java.template: New file - copy of 
	java-wrapper.java.template.
	* Makefiles/old-java-wrapper.objc.template: New file - copy of
	java-wrapper.objc.template.
	* Makefiles/old-java-wrapper.readme.template: New file - copy of
	java-wrapper.readme.template.
	* Makefiles/old-java-wrapper.top.debug.template: New file - copy
	of java-wrapper.top.debug.template.
	* Makefiles/old-java-wrapper.top.template: New file - copy of
	java-wrapper.top.template.
	* GNUmakefile: Install the old makefiles as well.

Mon May  7 04:47:37 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* main.m (main): For libFoundation, disable double-check of
	autoreleasing.

Sun May  6 23:49:20 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCLibrary.m ([WCLibrary +initializeWithOptions:]): Set
	verboseOutput at the beginning, so that WCHeaderParser can access
	it during initialization.
	
Sun May  6 15:55:43 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCShortType.h: New file.
	* WCShortType.m: New file.
	* WCLongType.h: New file.
	* WCLongType.m: New file.
	* WCUnsignedLongType.h: New file.
	* WCUnsignedLongType.m: New file.
	* WCLongLongType.h: New file.
	* WCLongLongType.m: New file.
	* WCUnsignedLongLongType.h: New file.
	* WCUnsignedLongLongType.m: New file.
	* GNUmakefile (WrapCreator_OBJC_FILES): Added the new files.
	* WCTypeLoader.m ([+typeWithObjcType:]): Added code to recognize
	`short', `short int', `signed short', `signed short int',
	`unsigned short int', `long', `long int', `signed long', `signed
	long int', `unsigned long', `unsigned long int', `long long',
	`long long int', `signed long long', `signed long long int',
	`unsigned long long', `unsigned long long int'.

Sat May  5 23:56:50 2001  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCTypeLoader.m (defaultMorphTypes): Added morphing of
	Number<-->NSNumber.
	
Thu Apr 26 12:45:23 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file): Clean
	up the obsolete Reference javadoc documentation.

Wed Feb 21 15:24:35 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCUnsignedShortType.h: New file.
	* WCUnsignedShortType.m: New file.
	* GNUmakefile (WrapCreator_OBJC_FILES): Added WCUnsignedShortType.m
	* WCTypeLoader.m ([+typeWithObjcType:]): Use the new
	WCUnsignedShortType upon encountering a `unsigned short'.
	
Mon Feb 19 11:21:54 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.objc.template (VERSION): New variable.
	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file): Replace 
	VERSIONHERE with VERSION in java-wrapper.objc.template.
	
Fri Feb  9 10:03:42 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCMethod.m ([-outputJavaWrapper]), ([-outputObjcWrapper]):
	Modified for new - fixed - way of wrapping initializers.

Wed Feb  7 12:26:56 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.java.template: Changed default install to
	be into Developer/LIBRARYNAME/Java/Reference/.
	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file):
	Accordingly, do not substitute PACKAGEHERE in
	java-wrapper.java.template.
	
Tue Feb  6 18:49:58 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.java.template: Add -public to 
	ADDITIONAL_JAVADOCFLAGS.

Tue Feb  6 18:04:39 2001  Nicola Pero  <nicola@brainstorm.co.uk>
	
	* main.m (main): Added --no-javadoc option; use new WCLibrary
	initializer.  (print_help_and_exit): Added explanation of
	--no-javadoc option.
	* WCLibrary.m ([+initializeWithOptions:]): Replaces the old
	initialize method to make it easier to add options.  Also, added 
	outputJavadoc support.
	* WCLibrary.m ([+outputJavadoc]): New method.
	* WCLibrary.h: Updated.
	* WCClass.m ([-outputWrappers]): If output of javadoc is turned
	on, output tiny javadoc comment on the class as being a wrapper
	for the corresponding objective-C class.
	* WCMethod.m ([WCMethod -outputJavaWrapper]): If output of javadoc
	is turned on, output tiny javadoc comment on the method as being a
	wrapper for the corresponding objective-c method.
	* Makefiles/java-wrapper.make: Pass the javadoc=no option down to
	WrapCreator.  ($(WRAPPER_DIR)/stamp-file): Substitute JAVADOCHERE
	and PACKAGEHERE in the Java GNUmakefile.
	* Makefiles/java-wrapper.java.template: set javadoc variable; 
	Set DOCUMENT_NAME, xxx_JAVADOC_FILES, xxx_DOC_INSTALL_DIR; 
	include documentation.make if javadoc is not no.
	
Mon Feb  5 15:09:27 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCLibrary.m (topLevelDirectory): New static variable to hold the
	top level directory.
	* WCLibrary.m ([+initializeWithJigsFile:preprocessedHeaderFile:
	headerFile:wrapDirectory:libraryName:verboseOutput:]): Set the new
	static variable.
	* WCLibrary.h ([-fileWithRelativePath:]): New method.
	* WCLibrary.m ([-fileWithRelativePath:]): Idem.

	* WCClass.h (fileWithPreambleJavaCode, fileWithIncludedJavaCode,
	fileWithIncludedObjcCode): New ivars.
	* WCClass.m ([-initWithDictionary:]): Set the new ivars by reading
	them from the .jigs file.
	* WCClass.m ([-outputWrappers]): Read the files and include the
	custom code.
	
Thu Jan 25 15:46:30 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file): Output
	RPM dependency of the debugging java wrapper package on the non
	debugging one.

Thu Jan 25 14:47:19 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make: Use java-wrapper.top.debug.template
	rather than java.wrapper.top.template if debugging is enabled.
	* Makefiles/java-wrapper.top.debug.template: New file with 
	modified SUBPROJECTS and PACKAGE_NAME.
	* GNUmakefile (after-install): Install
	java-wrapper.top.debug.template too.
	
Thu Jan 25 12:21:31 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make ($(WRAPPER_DIR)/stamp-file):
	Modified conditionals to always enable automatical building of
	java wrappers, except if BUILD_JAVA_WRAPPER_AUTOMATICALLY was
	explicitly set `no'.

Wed Jan 24 17:18:43 2001  Nicola Pero  <nicola@brainstorm.co.uk>

	* GNUmakefile (after-install): Prefix installation paths with
	$(INSTALL_ROOT_DIR) so that it can be RPM packaged.
	* Makefiles/java-wrapper.top.template (PACKAGE_NAME): Changed
	wrapper package name from $(PACKAGE_NAME)-wrap to
	$(PACKAGE_NAME)-wrapper. (VERSION): New variable.
	* Makefiles/java-wrapper.make (after-$(TARGET)-all): If
	BUILD_JAVA_WRAPPER_AUTOMATICALLY is yes, then step into the
	wrapper dir and compile it automatically after the library.
	(install-java_wrapper): Idem for install.
	(uninstall-java_wrapper): Idem for uninstall.
	* Makefiles/java-wrapper.make (WRAPPER_SPEC_IN_FILE): New
	variable. (WRAPPER_SCRIPT_IN_FILE): New variable.
	($(WRAPPER_DIR)/stamp-file): Also set VERSION in the top level
	makefile; use PACKAGE_NAME rather than LIBRARY_NAME; copy the
	.spec.in and script.in files for the wrapper into the wrapper dir;
	made end message more verbose.
	
Thu Nov 30 12:18:20 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* main.m (main): Initialize NSProcessInfo if building 
	with GS_PASS_ARGUMENTS.

Thu Nov 30 11:24:53 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	Patches by Helge Hess <helge.hess@skyrix.com>:
	* main.m (main): Initialize libFoundation if we are 
	building on libFoundation.
	* WCClass.m ([-description]): New method.

Mon Nov 20 15:13:29 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCLibrary.m ([+outputWrappers]): Output the new macros
	JIGS_ONLOAD_ENTER and JIGS_ONLOAD_EXIT for thread safety.

Fri Nov  3 15:30:13 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCClass.m ([-initWithDictionary:]): Read the `hardcoded
	constants' section in the .jigs file.  ([-outputWrappers]): Added
	code to output the `hardcoded constants'.
	
Thu Nov  2 16:01:24 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCLibrary.m ([+initializeWithJigsFile:preprocessedHeaderFile:
	headerFile:wrapDirectory:libraryName:verboseOutput:]):
	Accept enumerations and manage them as custom types with 
	int primitive type.

Wed Nov  1 15:06:56 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCLibrary.m ([+initializeWithJigsFile:preprocessedHeaderFile:
	headerFile:wrapDirectory:libraryName:verboseOutput:]): Some code
	from ([+outputWrappers]) has been moved here, so that all the
	classes to wrap are loaded in before the wrapping takes place.
	([+javaClassNameForObjcClassName:]): New method made possible by
	the afore mentioned rearranging of class loading.  All the code
	trying to guess the class name mapping has been moved here from
	[WCObjectType -javaArgumentType].
	* WCLibrary.h: Updated.
	* WCObjectType.h: Added ivar longJavaType.
	* WCObjectType.m ([-initWithObjcType:]): Ask the library to do the
	mapping of class names.  ([-javaArgumentType]): Moved most of the
	code to WCLibrary.m; now simply use the mapped name.
	* WCMethod.m ([-outputJniMethodName]): Warn the user if we don't
	have enough information to output a working wrapper for this
	method and he needs to help us by adding a `class method name
	mapping hints' section to his .jigs file.
	
Wed Nov  1 14:55:45 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* Makefiles/java-wrapper.make: Run WrapCreator in silent mode if
	make is run with arguments `verbose=no'.

Wed Nov  1 11:32:49 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCMethod.m (convertToJNI): New function converting class names
	to JNI convention for use in long JNI native function names.
	([-setOutputFullJniName:]): New method.  ([-outputJniMethodName]):
	Added code to output a long jni method name if required.
	* WCMethod.h: Updated for the changes.
	* WCClass.m ([-outputWrappers]): Rewritten code which outputs
	method wrappers so that it decides whether to use the long JNI
	name or the short one for each wrapped method.
	(setNeedsLongJniName): New function to support the new code in
	([-outputWrappers]).
	
Fri Oct 20 12:40:29 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCHeaderParser.m ([+methodNameFromMethodDeclaration:]): New method.
	* WCHeaderParser.h: Declared the new method.
	* WCClass.m ([-initWithDictionary:]): Accept and manage a `method
	declarations' option.  ([-declarationOfMethod:isClassMethod:]):
	New method.  ([-outputWrappers]): Use the new method; improved
	comment output.
	* WCClass.h: Declared the new method, added related instance 
	variables.

Tue Oct 17 14:37:25 2000  Nicola Pero  <n.pero@mi.flashnet.it>

	* WCTypeLoader.m: Use the new JIGSNSStringFromJstring and
	JIGSJstringFromNSString functions when morphing strings.

Fri Oct  6 12:41:40 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCType.h, WCType.m ([-javaArgumentType]): New method.
	* WCIdType.m ([-javaArgumentType]): Implemented.
	* WCObjectType.m ([-javaArgumentType]): Implemented.
	* WCPrimitiveType.h: Added ivar for java argument type.
	* WCPrimitiveType.m ([-javaArgumentType]): Implemented.
	* WCBOOLType.m, WCCharType.m, WCIntType.m, WCDoubleType.m: Set the
	java argument type ivar.
	* WCFloatType.m, WCUnsignedInt.m, WCCustomType.m: Idem.
	* WCMorphType.h, WCMorphType.m: Added support for java argument 
	type.
	* WCTypeLoader.m: Updated for change in WCMorphType; added 
	automatic morphing of selectors.
	* WCMethod.h, WCMethod.m ([-outputJavaArgumentSignature]),
	([-outputSelectorMapping]): New methods.
	* WCClass.m ([-outputWrappers]): Added code to output file with
	the method mapping for this class.
	* WCLibrary.h, WCLibrary.m ([+selectorMapFileForClass:]): New method.
	* WCLibrary.m ([+outputWrappers]): Output a file loading in all
	the selector mapping files for all classes; output code into the
	library initialization routine to load in the selector mappings.
	
Thu Sep 28 11:54:58 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.objc.template: Added setting of debug and
	profile flags to match the ones of the wrapped library.
	* Makefiles/java-wrapper.java.template: Idem. 
	* Makefiles/java-wrapper.make (before-$(TARGET)-all): Warn if
	trying to build the wrapper for a static library.
	 (WRAPPER_DIR): Add suffix if building a debug and/or profile
	version.  ($(WRAPPER_DIR)/stamp-file): Set the info about debug
	and profile in the GNUmakefiles we are generating; echo
	instructions on how to compile the wrapper at the end;
	(internal-java_wrapper-distclean): Remove JavaWrapper_debug and
	similar directories in distclean.
	* WCClass.m ([-outputWrappers]): Made output code invoke the new
	JIGS.loadLibrary () facility rather than the bare
	System.loadLibrary () to allow debug libraries to be wrapped;
	output import of gnu.gnustep.java.JIGS to allow this.

Tue Sep 26 12:27:43 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCLibrary.m ([+outputWrappers]): Read the custom type mapping
	and create the appropriate WCCustomType objects.
	* WCCustomType.m: New file.
	* WCCustomType.h: New file.
	* GNUmakefile (WrapCreator_OBJC_FILES): Added WCCustomType.m

Wed Sep  6 02:37:35 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCLibrary.m ([+prerequisiteLibraries]): New method.
	* WCLibrary.h: Declared the method.
	* WCClass.m ([-prerequisiteLibraries]): New method.
	* WCClass.h: Declared the new method.
	* WCClass.m ([-outputWrappers]): Output commands to load 
	in any prerequisite library native wrappers before the 
	library native wrapper.

Tue Sep  5 15:59:02 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCDoubleType.h, WCDoubleType.m, WCFloatType.h, WCFloatType.m:
	New files.
	* GNUmakefile: Added the new files.
	* WCTypeLoader.m ([+typeWithObjcType:]): Added float and double
	type.
	
Fri Aug 18 18:19:10 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCPrimitiveType.m ([-initWithObjcType:]): Fixed typo/bug
	preventing primitive types from being wrapped.

Fri Aug 18 17:14:10 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	Major speed up of WrapCreator, by parsing the header file 
	only once.
	* WCHeaderParser.m ([-initWithHeaderFile:]): Parse the whole
	header file once, saving all the method declarations.
	([-declarationOfMethod:isClassMethod:]): Moved all the parsing
	code to [-initWithHeaderFile:].  (skipObjcType): Made function
	inline.
	* WCHeaderParser.h: Added two ivars to store the parsed methods.
	* WCLibrary.m ([+initializeWithJigsFile:preprocessedHeaderFile:
	headerFile:wrapDirectory:libraryName:verboseOutput:]): Set verbose
	output before anything else, so it can be accessed by
	WCHeaderParser during initialization.
	
Fri Aug 18 16:05:10 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* WCClass.m ([-initWithDictionary:]): Fixed typo/bug when
	objective-c name is not specified.

Sun Aug 13 15:00:30 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make (java-wrapper): Depend on a stamp
	file rather than on GNUmakefile.  ($(WRAPPER_DIR)/GNUmakefile):
	Changed to $(WRAPPER_DIR)/stamp-file; create stamp-file at the
	end.

Sat Aug  5 15:46:27 2000  Nicola Pero  <nicola@brainstorm.co.uk>

	* Makefiles/java-wrapper.make (WRAP_CREATOR): Use opentool 
	to run WrapCreator more safely.

	
