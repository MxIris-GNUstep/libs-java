{ /* -*-c-*- */
types = { 
  NSTimeInterval = double;
  unichar = short;
};

classes = (

{
  "java name" = "gnu.gnustep.base.GSMimeHeader";
  
  "class methods" = (
    "makeQuoted:",
    "makeToken:"
  );
  "instance methods" = (
    "name",
    "objectForKey:",
    "objects",
    "parameterForKey:",
    "parameters",
    "setName:",
    "setObject:forKey:",
    "setParameter:forKey:",
    "setParameters:",
    "setValue:",
    "text",
    "value"
  );
  "initializers" = (
    "initWithName:value:parameters:"
  );
},

{
  "java name" = "gnu.gnustep.base.GSMimeDocument";
  
  "class methods" = (
    "mimeDocument"
  );
  "instance methods" = (
    "addContent:",
    "addHeader:",
    "allHeaders",
    "content",
    "contentByID:",
    "contentByName:",
    "contentFile",
    "contentID",
    "contentName",
    "contentSubType",
    "contentType",
    "deleteHeader:",
    "deleteHeaderNamed:",
    "headerNamed:",
    "headersNamed:",
    "makeContentID",
    "setContent:",
    "setContent:type:subType:name:",
    "setHeader:"
  );
},

{
  "java name" = "gnu.gnustep.base.GSMimeParser";
  
  "class methods" = (
    "documentFromData:",
    "mimeParser"
  );
  "instance methods" = (
    "data",
    "document",
    "expectNoHeaders",
    "isComplete",
    "isInBody",
    "isInHeaders",
    "parse:",
    "parseHeader:"
  );
},

{
  "java name" = "gnu.gnustep.base.GSXMLAttribute";
  
  "instance methods" = (
    "next",
    "previous",
    "value"
  );
  /* Can't return GSXMLAttribute here because in Java you can't change
     the return type when you override in a subclass a method of the
     superclass ! */
  "method declarations" = ("- (GSXMLNode *)next",
			   "- (GSXMLNode *)previous");
},

{
  "java name" = "gnu.gnustep.base.GSXMLDocument";
  
  "instance methods" = ("encoding",
			"makeNodeWithNamespace:name:content:",
			"root",
			"setRoot:",
			"writeToFile:atomically:",
			"version");
  "class methods" = ("documentWithVersion:" );
},

{
  "java name" = "gnu.gnustep.base.GSXMLNamespace";
  
  "class methods" = ("descriptionFromType:",
			"typeFromDescription:" );
  "instance methods" = ("href",
			"next",
			"prefix",
			"type",
			"typeDescription");
  /* The following conflicts with other GSXML* classes */
  "method declarations" = ("- (GSXMLNamespace *)next");
},

{
  "java name" = "gnu.gnustep.base.GSXMLNode";
  
  "class methods" = ("descriptionFromType:",
			"typeFromDescription:" );
  "instance methods" = (
    "attributes",
    "content",
    "document",
    "firstAttribute",
    "firstChild",
    "firstChildElement",
    "makeAttributeWithName:value:",
    "makeChildWithNamespace:name:content:",
    "makeComment:",
    "makeNamespaceHref:prefix:",
    "makePI:content:",
    "makeText:",
    "name",
    "namespace",
    "namespaceDefinitions",
    "next",
    "nextElement",
    "objectForKey:",
    "parent",
    "previous",
    "setObject:forKey:",
    "type",
    "typeDescription"
  );
  /* The following conflicts with other GSXML* classes */
  "method declarations" = ("- (GSXMLNode *)next",
			   "- (GSXMLNode *)previous");
},

{
  "java name" = "gnu.gnustep.base.GSXMLParser";
  
  "class methods" = ("loadEntity:at:" );
  "instance methods" = ("document",
			"doValidityChecking:",
			"errNo",
			"getWarnings:",
			"keepBlanks:",
			"parse",
			"parse:",
			"substituteEntities:");
  "initializers" = ("initWithSAXHandler:",
	"initWithSAXHandler:withData:",
	"initWithSAXHandler:withContentsOfFile:");
},

{
  "java name" = "gnu.gnustep.base.GSSAXHandler";
  
  "class methods" = ("handler" );
  "instance methods" = (
			"attribute:value:",
			"attributeDecl:name:type:typeDefValue:defaultValue:",
			"cdataBlock:",
			"characters:",
			"comment:",
			"elementDecl:type:",
			"endDocument",
			"endElement:",
			"entityDecl:type:public:system:content:",
			"error:",
			"error:colNumber:lineNumber:",
			"externalSubset:externalID:systemID:",
			"fatalError:",
			"fatalError:colNumber:lineNumber:",
			"getEntity:",
			"getParameterEntity:",
			"globalNamespace:href:prefix:",
			"hasExternalSubset",
			"hasInternalSubset",
			"ignoreWhitespace:",
			"internalSubset:externalID:systemID:",
			"isStandalone",
			"loadEntity:at:",
			"namespaceDecl:href:prefix:",
			"notationDecl:public:system:",
			"parser",
			"processInstruction:data:",
			"reference:",
			"startDocument",
			"startElement:attributes:",
			"unparsedEntityDecl:public:system:notationName:",
			"warning:",
			"warning:colNumber:lineNumber:" );
  "initializers" = ("init" );
},

{
  "java name" = "gnu.gnustep.base.NSArray";
  
  "file to include in java code" = "NSArray.java.add";
  "file to include in objective-c code" = "NSArray.m.add";
  
  "instance methods" = ("containsObject:",
			"count", 
			"indexOfObject:", 
			"indexOfObject:inRange:",
			"indexOfObjectIdenticalTo:", 
			"indexOfObjectIdenticalTo:inRange:",
			"lastObject", 
			"objectAtIndex:", 
			"objectEnumerator", 
			"reverseObjectEnumerator", 
			"makeObjectsPerformSelector:",
			"makeObjectsPerformSelector:withObject:",
			"firstObjectCommonWithArray:",
			"isEqualToArray:",
			"arrayByAddingObject:",
			"arrayByAddingObjectsFromArray:",
			"sortedArrayUsingSelector:",
			"subarrayWithRange:",
			"componentsJoinedByString:",
			"pathsMatchingExtensions:",
			"writeToFile:atomically:");
  "initializers" = ("init", "initWithArray:", 
		    "initWithContentsOfFile:");
  "hardcoded constants" = ("int NotFound = 0x7fffffff");
},

  {
    "java name" = "gnu.gnustep.base.NSBundle";
    
    "class methods" = ("allBundles",
		       "allFrameworks",
		       "mainBundle",
		       //"bundleForClass:",
		       "bundleWithPath:",
		       //"pathForResource:ofType:inDirectory:",
		       //"pathForResource:ofType:inDirectory:withVersion:"
		       );
    
    "instance methods" = ("bundlePath",
			  //"classNamed:",
			  //"principalClass",
			  "pathsForResourcesOfType:inDirectory:",
			  //"pathForResource:ofType:inDirectory:",
			  "pathForResource:ofType:",
			  "localizedStringForKey:value:table:",
			  "resourcePath",
			  "bundleVersion",
			  "setBundleVersion:",
			  "infoDictionary",
			  "load");
    
    "initializers" = ("init", "initWithPath:");
  },

  {
    "java name" = "gnu.gnustep.base.NSCalendarDate";
    
    "class methods" = (
      "calendarDate",  
      "dateWithTimeIntervalSinceNow:",  
      "dateWithString:",  
      "dateWithString:calendarFormat:",  
      "dateWithString:calendarFormat:locale:",  
      "dateWithNaturalLanguageString:",  
      "dateWithNaturalLanguageString:locale:",  
      "dateWithTimeIntervalSinceReferenceDate:",  
      "dateWithTimeIntervalSince1970:",  
      "dateWithYear:month:day:hour:minute:second:timeZone:",  
      "distantFuture", 
      "distantPast" 
      //"timeIntervalSinceReferenceDate"
    );
    
    "initializers" = (
      "initWithTimeIntervalSinceNow:", 
      "initWithString:",
      "initWithString:calendarFormat:",
      "initWithString:calendarFormat:locale:",
      "initWithTimeInterval:sinceDate:",
      "initWithYear:month:day:hour:minute:second:timeZone:",
      "init"
      //"initWithTimeIntervalSinceReferenceDate:"
    );
    
    "instance methods" = (
      "addTimeInterval:",
      "addYear:month:day:hour:minute:second:",
      "calendarFormat",
      "dateByAddingYears:months:days:hours:minutes:seconds:",
      "dayOfCommonEra",
      "dayOfMonth",
      "dayOfWeek",
      "dayOfYear",
      "description", 
      "descriptionWithLocale:",
      "descriptionWithCalendarFormat:timeZone:locale:",
      "earlierDate:", 
      "hourOfDay",
      "isEqualToDate:", 
      "laterDate:", 
      "minuteOfHour",
      "monthOfYear",
      "secondOfMinute",
      "setCalendarFormat:",
      "setTimeZone:",
      "timeIntervalSinceDate:", 
      "timeIntervalSinceNow", 
      "timeIntervalSinceReferenceDate", 
      "timeIntervalSince1970",
      "timeZone",
      "yearOfCommonEra"
      //"compare:"
      //"dateWithCalendarFormat:timeZone:"
    );
  },

  {
    "java name" = "gnu.gnustep.base.NSCharacterSet";
    
    "class methods" = (
      "alphanumericCharacterSet",
      "characterSetWithBitmapRepresentation:",
      "characterSetWithCharactersInString:",
      "characterSetWithContentsOfFile:",
      "characterSetWithRange:",
      "controlCharacterSet",
      "decimalDigitCharacterSet",
      "decomposableCharacterSet",
      "illegalCharacterSet",
      "letterCharacterSet",
      "lowercaseLetterCharacterSet",
      "nonBaseCharacterSet",
      "punctuationCharacterSet",
      "symbolAndOperatorCharacterSet",
      "uppercaseLetterCharacterSet",
      "whitespaceAndNewlineCharacterSet",
      "whitespaceCharacterSet"
    );
    
    "initializers" = (
    );
    
    "instance methods" = (
      "bitmapRepresentation",
      "characterIsMember:",
      "invertedSet"
    );
  },

  {
    "java name" = "gnu.gnustep.base.NSCountedSet";

    "file to include in java code" = "NSCountedSet.java.add";
    
    "instance methods" = ("countForObject:",
			  "purge:",
			  "unique:");
    
    "initializers" = ("init", 
		      "initWithCapacity:",
		      "initWithArray:",
		      "initWithSet:",
		      "initWithSet:copyItems:");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSData";
    
    "file to include in java code" = "NSData.java.add";
    "file to include in objective-c code" = "NSData.m.add";
    
    "instance methods" = 
    (
     "subdataWithRange:",
     "isEqualToData:",
     "length",
     "writeToFile:atomically:"
     );
    
    "initializers" = 
    (
     "init", 
     "initWithContentsOfFile:",
     "initWithData:"
     );
  },
    
  {
    "java name" = "gnu.gnustep.base.NSDate";
    
    "class methods" = ("date",  
		       "dateWithTimeIntervalSinceNow:",  
		       "dateWithString:",  
		       "dateWithNaturalLanguageString:",  
		       "dateWithNaturalLanguageString:locale:",  
		       "dateWithTimeIntervalSinceReferenceDate:",  
		       "dateWithTimeIntervalSince1970:",  
		       "distantFuture", 
		       "distantPast" 
		       //"timeIntervalSinceReferenceDate"
		       );
    
    "initializers" = ("initWithTimeIntervalSinceNow:", 
		      "initWithString:",
		      "initWithTimeInterval:sinceDate:",
		      "init"
		      //"initWithTimeIntervalSinceReferenceDate:"
		      );
    
    "instance methods" = (
			  "addTimeInterval:",
			  "isEqualToDate:", 
			  "earlierDate:", 
			  "laterDate:", 
			  //"compare:",
			  "timeIntervalSinceDate:", 
			  "timeIntervalSinceNow", 
			  "timeIntervalSinceReferenceDate", 
			  "timeIntervalSince1970",
			  "description", 
			  "descriptionWithLocale:",
			  "descriptionWithCalendarFormat:timeZone:locale:"
			  //"dateWithCalendarFormat:timeZone:"
			  );
  },
    
  {
    "java name" = "gnu.gnustep.base.NSDictionary";

    "file to include in java code" = "NSDictionary.java.add";
    "file to include in objective-c code" = "NSDictionary.m.add";    
    
    "instance methods" = ("count",
			  "allKeys",
			  "allKeysForObject:",
			  "allValues",
			  "keyEnumerator",
			  "keysSortedByValueUsingSelector:",
			  "objectEnumerator",
			  "objectForKey:",
			  "objectsForKeys:notFoundMarker:",
			  "isEqualToDictionary:",
			  "writeToFile:atomically:"
			  );
    "initializers" = ("init", 
		      "initWithDictionary:",
		      "initWithDictionary:copyItems:",
		      "initWithObjects:forKeys:",
		      "initWithContentsOfFile:");

    /* The following conflicts with UserDefaults' one */
    "method declarations" = ("- (id) objectForKey: (id)aKey");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSDistributedLock";
    
    "class methods" = (
      "lockWithPath:"
    );
    
    "initializers" = (
      "initWithPath:"
    );
    
    "instance methods" = (
      "breakLock",
      "lockDate",
      "tryLock",
      "unlock"
    );
  },

  {
    "java name" = "gnu.gnustep.base.NSEnumerator";
    
    "instance methods" = (//"allObjects",
			  "nextObject");
    "method name mapping" = { "nextObject" = "nextElement"; };
  },
    
  {
    "java name" = "gnu.gnustep.base.NSFileHandle";
    
    "class methods" = (
      "fileHandleForReadingAtPath:",
      "fileHandleForWritingAtPath:",
      "fileHandleForUpdatingAtPath:",
      "fileHandleWithStandardError",
      "fileHandleWithStandardInput",
      "fileHandleWithStandardOutput",
      "fileHandleWithNullDevice",
      "fileHandleAsServerAtAddress:service:protocol:",
      "fileHandleAsClientAtAddress:service:protocol:",
      "fileHandleAsClientInBackgroundAtAddress:service:protocol:",
      "fileHandleAsClientInBackgroundAtAddress:service:protocol:forModes:"
    );
    
    "initializers" = (
    );
    
    "instance methods" = (
      "acceptConnectionInBackgroundAndNotify",
      "acceptConnectionInBackgroundAndNotifyForModes:",
      "availableData",
      "closeFile",
      "offsetInFile",
      "readDataOfLength:",
      "readDataToEndOfFile",
      "readInBackgroundAndNotify",
      "readInBackgroundAndNotifyForModes:",
      "readInProgress",
      "readToEndOfFileInBackgroundAndNotify",
      "readToEndOfFileInBackgroundAndNotifyForModes:",
      "seekToEndOfFile",
      "seekToFileOffset:",
      "socketAddress",
      "socketProtocol",
      "socketService",
      "sslConnect",
      "sslDisconnect",
      "sslSetCertificate:privateKey:PEMpasswd:",
      "synchronizeFile",
      "truncateFileAtOffset:",
      "useCompression",
      "waitForDataInBackgroundAndNotify",
      "waitForDataInBackgroundAndNotifyForModes:",
      "writeData:",
      "writeInBackgroundAndNotify:",
      "writeInBackgroundAndNotify:forModes:",
      "writeInProgress"
    );
    "method declarations" = (
      "- (void) writeData: (NSData*)item"
    );
    "hardcoded constants" = (
      "String NSFileHandleConnectionAcceptedNotification
	= \"NSFileHandleConnectionAcceptedNotification\"",
      "String NSFileHandleDataAvailableNotification
	= \"NSFileHandleDataAvailableNotification\"",
      "String NSFileHandleReadCompletionNotification
	= \"NSFileHandleReadCompletionNotification\"",
      "String NSFileHandleReadToEndOfFileCompletionNotification
	= \"NSFileHandleReadToEndOfFileCompletionNotification\"",
      "String NSFileHandleNotificationDataItem
	= \"NSFileHandleNotificationDataItem\"",
      "String NSFileHandleNotificationFileHandleItem
	= \"NSFileHandleNotificationFileHandleItem\"",
      "String NSFileHandleNotificationMonitorModes
	= \"NSFileHandleNotificationMonitorModes\"",
      "String NSFileHandleOperationException
	= \"NSFileHandleOperationException\"",
      "String GSFileHandleConnectCompletionNotification
	= \"GSFileHandleConnectCompletionNotification\"",
      "String GSFileHandleWriteCompletionNotification
	= \"GSFileHandleWriteCompletionNotification\"",
      "String GSFileHandleNotificationError
	= \"GSFileHandleNotificationError\""
     );
  },

  {
    "java name" = "gnu.gnustep.base.NSMutableArray";
    
    "file to include in java code" = "NSMutableArray.java.add";
    
    "instance methods" = ("addObject:",
			  "addObjectsFromArray:",
			  "insertObject:atIndex:",
			  "replaceObjectAtIndex:withObject:",
			  "replaceObjectsInRange:withObjectsFromArray:",
			  "replaceObjectsInRange:withObjectsFromArray:range:",
			  "setArray:",
			  "removeAllObjects",
			  "removeLastObject",
			  "removeObject:",
			  "removeObject:inRange:",
			  "removeObjectAtIndex:",
			  "removeObjectIdenticalTo:",
			  "removeObjectIdenticalTo:inRange:",
			  "removeObjectsInArray:",
			  "removeObjectsInRange:",
			  "sortUsingSelector:");
    "initializers" = ("init", 
		      "initWithCapacity:", 
		      "initWithArray:", 
		      "initWithContentsOfFile:");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSMutableCharacterSet";
    
    "class methods" = (
    );
    
    "initializers" = (
    );
    
    "instance methods" = (
      "addCharactersInRange:",
      "addCharactersInString:",
      "formUnionWithCharacterSet:",
      "formIntersectionWithCharacterSet:",
      "removeCharactersInRange:",
      "removeCharactersInString:",
      "invert"
    );
  },

  {
    "java name" = "gnu.gnustep.base.NSMutableData";
    "file to include in java code" = "NSMutableData.java.add";
    
    "instance methods" = ("increaseLengthBy:",
			  "setLength:",
			  "appendData:",
			  "resetBytesInRange:",
			  "setData:",
			  "capacity",
			  "setCapacity:");
    
    "initializers" = ("init", 
		      "initWithContentsOfFile:",
		      "initWithData:",
		      "initWithLength:");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSMutableDictionary";

    "file to include in java code" = "NSMutableDictionary.java.add";
    
    "instance methods" = ("addEntriesFromDictionary:",
			  "removeAllObjects",
			  "removeObjectForKey:",
			  "removeObjectsForKeys:",
			  "setDictionary:",
			  "setObject:forKey:");
    "initializers" = ("init", 
		      "initWithCapacity:", 
		      "initWithDictionary:",
		      "initWithDictionary:copyItems:",
		      "initWithObjects:forKeys:",
		      "initWithContentsOfFile:");

    "method declarations" = ("- (void) setObject: (id)anObject forKey: (id)aKey",
			     "- (void) removeObjectForKey: (id)aKey");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSMutableSet";

    "file to include in java code" = "NSMutableSet.java.add";
    
    "instance methods" = 
    ("addObject:",
     "removeObject:",
     "removeAllObjects",
     "addObjectsFromArray:",
     "unionSet:",
     "minusSet:",
     "intersectSet:"
		     );
    "initializers" = ("init", 
		      "initWithCapacity:",
		      "initWithArray:",
		      "initWithSet:",
		      "initWithSet:copyItems:"
		      );
  },
    
  {
    "java name" = "gnu.gnustep.base.NSNotification";
    
    "class methods" = (
		       "notificationWithName:object:", 
		       "notificationWithName:object:userInfo:");
    
    "instance methods" = ("name", "object", "userInfo");	   
  },
    
  {
    "java name" = "gnu.gnustep.base.NSNotificationCenter";
    
    "class methods" = ("defaultCenter");
    
    "instance methods" = (
			  "addObserver:selector:name:object:",
			  "removeObserver:",
			  "removeObserver:name:object:",
			  "postNotification:",
			  "postNotificationName:object:",
			  "postNotificationName:object:userInfo:");
    /* As a special exception, we need to declare this stuff 
       because the declarations conflict with 
       NSDistributedNotificationCenter's ones. */
    "method declarations" = (
			     "- (void) addObserver: (id)anObserver  
                                 selector: (SEL)aSelector  
                                     name: (NSString *)notificationName  
                                   object: (id)anObject",
			     "- (void) postNotificationName: (NSString*)name  
                                            object: (id)object;",
			     "- (void) postNotificationName: (NSString*)name  
		                            object: (id)object
                                          userInfo: (NSDictionary*)info;"
			     );
  },
    
  {
    "java name" = "gnu.gnustep.base.NSNull";
    
    "class methods" = ("null");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSPipe";
    
    "class methods" = ("pipe");
    
    "initializers" = ();
    
    "instance methods" =  (
      "fileHandleForReading",
      "fileHandleForWriting"
    );
  },

  {
    "java name" = "gnu.gnustep.base.NSPort";
    
    "class methods" = ("port");
    
    "initializers" = ("init");
    
    "instance methods" =  (
			   "invalidate",
			   "isValid",
			   "setDelegate:",
			   "delegate",
			   "close",
			   //"addConnection:toRunLoop:forMode:",
			   //"removeConnection:fromRunLoop:forMode:",
			   "reservedSpaceLength",
			   "sendBeforeDate:msgid:components:from:reserved:");
    
    /* Just for safety, because NSUrl defines 
       "- (NSNumber *) port" */
    "method declarations" = ("+ (NSPort *) port");
  },
    
    
  {
    "java name" = "gnu.gnustep.base.NSProcessInfo";
    
    "class methods" = ("processInfo");		  
    "instance methods" = 
    ("arguments",
     "environment",
     "hostName",
     "processName",
     "globallyUniqueString",
     "setProcessName:"
     );
  },
    
  {
    "java name" = "gnu.gnustep.base.NSPropertyListSerialization";
    "file to include in objective-c code" 
      = "NSPropertyListSerialization.m.add";

    "class methods" = ("propertyListFromString:",
		       "stringFromPropertyList:",
		       "dataFromPropertyList:",
		       "propertyListFromData:");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSRunLoop";
    
    "class methods" = ("currentRunLoop");
    
    "initializers" = ("init");
    
    "instance methods" = (
			  "acceptInputForMode:beforeDate:",
			  "addTimer:forMode:",
			  "currentMode",
			  "limitDateForMode:",
			  "run",
			  "runMode:beforeDate:",
			  "runUntilDate:",
			  "addPort:forMode:",
			  "cancelPerformSelector:target:argument:",
			  "configureAsServer",
			  "performSelector:target:argument:order:modes:",
			  "removePort:forMode:"
			  // "removeTimerForMode" (APPLE) ??
			  // "containsTimerForMode" (APPLE) ??
			  // "timersForMode" (APPLE) ??
			  // "containsPortForMode" (APPLE) ??
			  // "portsForMode" (APPLE) ??
			  );
    "hardcoded constants" = 
    ("String DefaultRunLoopMode = \"NSDefaultRunLoopMode\"");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSSet";

    "file to include in java code" = "NSSet.java.add";
    "file to include in objective-c code" = "NSSet.m.add";

    "instance methods" = ("count", 
			  "allObjects",
			  "anyObject",
			  "containsObject:",
			  "makeObjectsPerform:",
			  "makeObjectsPerform:withObject:",
			  "member:",
			  "objectEnumerator",
			  "isSubsetOfSet:",
			  "intersectsSet:",
			  "isEqualToSet:");
    "initializers" = ("init", 
		      "initWithArray:",
		      "initWithSet:",
		      "initWithSet:copyItems:");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSTask";
    "class methods" = ("launchedTaskWithLaunchPath:arguments:");
    "instance methods" = ("arguments",
			  "currentDirectoryPath",
			  "environment",
			  "launchPath",
			  "standardError",
			  "standardInput",
			  "standardOutput",
			  "setArguments:",
			  "setCurrentDirectoryPath:",
			  "setEnvironment:",
			  "setLaunchPath:",
			  "setStandardError:",
			  "setStandardInput:",
			  "setStandardOutput:",
			  "isRunning",
			  "terminationStatus",
			  "interrupt",
			  "launch",
			  "terminate",
			  "usePseudoTerminal",
			  "waitUntilExit");
    "initializers" = ("init");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSTimeZone";
    
    "class methods" = ("timeZoneWithAbbreviation:", 
		       "timeZoneWithName:",
		       "timeZoneWithName:data:",
		       "timeZoneForSecondsFromGMT:",
		       "localTimeZone",
		       "defaultTimeZone",
		       "setDefaultTimeZone:",
		       "resetSystemTimeZone",       
		       // "knownTimeZoneNames", MISSING IN GNUSTEP
		       "abbreviationDictionary");

    "initializers" = ("initWithName:", "initWithName:data:");
    
    "instance methods" = ("abbreviation",
			  "abbreviationForDate:",
			  "name", 
			  "secondsFromGMT",
			  "secondsFromGMTForDate:", 
			  "isDaylightSavingTime", 
			  "isDaylightSavingTimeForDate:", 
			  // "data", MISSING IN GNUSTEP
			  "isEqualToTimeZone:");
  },

  {
    "java name" = "gnu.gnustep.base.NSTimer";
    
    "class methods" = (
		       //"scheduledTimerWithTimeInterval:invocation:repeats:",
		       "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",
		       //"timerWithTimeInterval:invocation:repeats:",
		       "timerWithTimeInterval:target:selector:userInfo:repeats:"
		       );
    
    "initializers" = ("init");
    
    "instance methods" = ("fire", 
			  "invalidate", 
			  "isValid", 
			  "timeInterval",
			  "fireDate",
			  "userInfo");
  },
    
  {
    "java name" = "gnu.gnustep.base.NSUserDefaults";
    
    /* FIXME: NSUserDefaults will always use for the application
       name "java", unless you do use NSProcessInfo 
       -setProcessName: to change it, which you *should* 
       usually do. */
    
    "class methods" = ("standardUserDefaults");		  
    "instance methods" = ("arrayForKey:",
			  "boolForKey:",
			  "dataForKey:",
			  "dictionaryForKey:",
			  "floatForKey:",
			  "integerForKey:",
			  "objectForKey:",
			  "stringArrayForKey:",
			  "stringForKey:",
			  "removeObjectForKey:",
			  "setBool:forKey:",
			  "setFloat:forKey:",
			  "setInteger:forKey:",
			  "setObject:forKey:",
			  "setSearchList:",
			  "searchList",
			  "dictionaryRepresentation",
			  "persistentDomainForName:",
			  "persistentDomainNames",
			  "removePersistentDomainForName:",
			  "setPersistentDomain:forName:", 
			  "synchronize",
			  "removeVolatileDomainForName:",
			  "setVolatileDomain:forName:", 
			  "volatileDomainForName:",
			  "volatileDomainNames",
			  "registerDefaults:");
    "initializers" = ("init", "initWithUser:"); 

    /* WARNING: We are forced to expose these methods in this way not
       to get conflicting selectors with NSDictionary and
       NSMutableDictionary, but the truth is - these methods want
       strings as keys - even if the Java declaration we are forced to
       use is more generic. */
    "method declarations" = ("- (id) objectForKey: (id)aKey", 
			     "- (void) setObject: (id)anObject forKey: (id)aKey",
     			     "- (void) removeObjectForKey: (id)aKey");
  }
);
"method name mapping" = {
  "description" = "toString";
  "null" = "nullValue";
  "addTimer:forMode:" = "addTimerForMode";
  "runMode:beforeDate:" = "runModeBeforeDate";
  "addPort:forMode:" = "addPortForMode";
  "removePort:forMode:" = "removePortForMode";
  "setObject:forKey:" = "setObjectForKey";
};
}







