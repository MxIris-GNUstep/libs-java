/* GSDebug.m -*-objc-*-
   Copyright (C) 2003 Free Software Foundation, Inc.

   Written by: Nicola Pero <n.pero@mi.flashnet.it>
   Date: October 2003

   This file is part of JIGS, the GNUstep Java Interface.

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA.
  */

#include "GSDebug.h"

@implementation GSDebug

/**
 * Turn on recording of all allocated objects of the named class.
 * Slows things a lot.
 */
+ (BOOL) allocationActiveRecordingObjects: (NSString*)className
{
  Class c = NSClassFromString(className);

  if (c != 0)
    {
      GSDebugAllocationActiveRecordingObjects(c);
      return YES;
    }
  return NO;
}

/**
 * Turn on/off recording of object allocation stats
 */
+ (BOOL) allocationActive: (BOOL)flag
{
  BOOL f = GSDebugAllocationActive(flag);
  return f;
}

/**
 * List number of allocated objects since recording was turned on or,
 * if flag is YES, since the last call to this method.
 */
+ (NSString*) allocationList: (BOOL)flag
{   
  const char    *str = GSDebugAllocationList(flag);
  NSString      *s = [NSString stringWithUTF8String: str];
    
  return s;
}

/**
 * Return all the currently allocated objects of the specified class
 * which were created since recording started.
 */
+ (NSArray*) allocationListRecordedObjects: (NSString*)className
{
  Class c = NSClassFromString(className);

  if (c != 0)
    {
      return GSDebugAllocationListRecordedObjects(c);
    }
  return nil;
}

+ (void) setDebugAllocationActive: (BOOL)active
{
  GSDebugAllocationActive (active);
}

+ (void) printAllocationList
{
  fprintf (stderr, GSDebugAllocationList (NO));
}

+ (void) printAllocationListSinceLastCheck
{
  fprintf (stderr, GSDebugAllocationList (YES));
}

@end
