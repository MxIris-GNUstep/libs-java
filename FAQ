JIGS Frequently Asked Questions
===============================

0. Where can I find examples of using GNUstep from Java ? 
=========================================================

Have a look into the Testing/Java directory for examples of java
programs using the GNUstep core libraries.

1. Does JIGS work with JNI 1.1 ? 
================================

No.  JIGS requires JNI 1.2, mainly because it uses weak references,
which are provided by JNI 1.2 but not by JNI 1.1.  There are no
current plans to port JIGS to JNI 1.1.

2. Can I use JIGS to access Objective-C libraries inside a Java servlet ? 
=========================================================================

Yes!  You're welcome to do it.  Here are a few hints: you need to make
sure that:

 * your java servlet has the classpath set so that it can access the
   java classes you want to use.  In apache, this is controlled by the
   file jserv.properties, where you need to add something like the
   following two lines:

     wrapper.classpath=/usr/GNUstep/System/Libraries/Java
     wrapper.classpath=/usr/GNUstep/Local/Libraries/Java

 * your java servlet has the library path set so that it can load in
   the gnustep libraries.  In apache, this is again controlled by the
   file jserv.properties, where you need to add something like the
   following line:

    wrapper.env.copy=LD_LIBRARY_PATH

   then, you need to `. /usr/GNUstep/System/Makefiles/GNUstep.sh'
   before starting apache.

 * the NSLog output of your java servlets goes into httpsd_error_log.  
   To tell the NSLog of one servlet from the NSLog of another, you 
   should set a different process name for each servlet, as described 
   at question 3.

 * see below question 3. if you need to use user defaults.

3. What about user defaults ? - they are all saved under 'java'
===============================================================

If you run GNUstep from java, it will always read its process name as
'java'.  This is nothing bad, except that all user defaults for java
applications would be saved under the name 'java', and mix one with
the other.  To workaround this, you just need to set the process name
of your process at the beginning of your code.  Something like:

  (NSProcessInfo.processInfo ()).setProcessName ("myApp");

Setting the process name is particularly important for code which runs
inside a JVM in a different process.  For example, if you have a java
servlet running inside Apache, you may want to set a different process
name for each java servlet.  I put something like

  (NSProcessInfo.processInfo ()).setProcessName ("Validate-servlet");

(where 'Validate-servlet' is replaced with a suitable name for each
servlet) at the beginning of each of my servlets.  [FIXME FIXME: not
sure this is the best way to go - servlets are not destroyed but
reused etc]

4. What about NSLog output ?  It always uses 'java' as process
==============================================================

See question 3. - it's the same problem with the same solution.
